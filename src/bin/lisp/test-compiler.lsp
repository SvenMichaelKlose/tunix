(dolist (i '("let" "mapcar" "mapcan" "do" "dolist" "aif"
             "with" "with-global" "prog1" "progn" "push"
             "group" "!=" "when" "make-queue" "with-queue"
             "queue-list" "enqueue"))
  (or (load (symbol (nconc (symbol-name i)
                           (symbol-name ".lsp"))))
      (error i)))

(message "Testing CMACROEXPAND...")
(load "cmacros.lsp")
(print (cmacroexpand '(and a b c)))
(print (cmacroexpand '(or a b c)))
(print (cmacroexpand '(? a b c)))

(message "Testing ARGEXPAND...")
(load "argexpand.lsp")
(and (argexpand nil nil)
     (error))
(or (equal (argexpand '(a b c) '(1 2 3))
           '((a 1) (b 2) (c 3)))
    (error))
(or (equal (argexpand '(a b . c) '(1 2 3))
           '((a 1) (b 2) (c (3))))
    (error))
(or (equal (argexpand '(a b . c) '(1 2 3 4))
           '((a 1) (b 2) (c (3 4))))
    (error))

(message "Testing FOLD-BLOCKS...")
(load "fold-blocks.lsp")
(!= (cmacroexpand (cdr macroexpand))
  (!= (fold-blocks !)
    (print 'unfolded)
    (@ print !)))

(message "Testing INLINE-FNS...")
(load "inline-fns.lsp")

(message "Testing EXEXPAND...")
(load "exexpand.lsp")

(message "Testing COMPILE...")
(load "dotimes.lsp")
(fn compile (x)
  (print 'input)
  (print x)
  (= x (macroexpand x))
  (print 'macroexpand)
  (print x)
  (= x (cmacroexpand x))
  (print 'cmacroexpand)
  (print x)
  (= x (inline-fns x))
  (print 'inline-fns)
  (print x)
  (= x (fold-blocks x))
  (print 'fold-blocks)
  (print x)
  (= x (exexpand x))
  (print 'exexpand)
  (print x))

(compile '((dotimes (i 10) (print i))))
