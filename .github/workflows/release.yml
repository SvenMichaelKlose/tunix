name: Create Release

on:
  push:
    branches:
      - test-release
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v1
      with:
        submodules: true

    - name: Set up Github environment
      id: setup_environment
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "ZIP_NAME=tunix.lisp.cbm.${{ env.VERSION }}.zip" >> $GITHUB_ENV

    - name: Install prerequisites
      run: sudo apt-get install -y gcc make vice texlive-latex-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended texlive-fonts-extra pandoc zip

    - name: Create config file
      run: echo -e "TARGET=vic20\nNDEBUG=1" > src/config

    - name: Build Project
      run: make allworlds

    - name: Run Tests
      run: make test

    - name: Make PDF manual
      id: make_pdf_manual
      run: cd src/bin/lisp/doc && ./md2pdf.sh

    - name: Copy PDF manual to root directory
      id: copy_pdf_manual
      run: cp src/bin/lisp/doc/manual.pdf tunix-lisp.pdf

    - name: Copy Markdown manual to root directory
      id: copy_markdown_manual
      run: cp src/bin/lisp/doc/manual.md tunix-lisp.md

    - name: Ensure output directory exists
      run: mkdir -p $(dirname ${{ env.ZIP_NAME }})

    - name: Zip files
      run: zip -o ${{ env.ZIP_NAME }} tunix-lisp.c128.d64 tunix-lisp.c16.d64 tunix-lisp.c64.d64 tunix-lisp.plus4.d64 tunix-lisp.vic20.d64 tunix-lisp.md tunix-lisp.pdf

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: TUNIX Lisp ${{ github.ref }}
        body: |
          TUNIX Lisp D64 images for the Commodore C128, C16, C64, Plus/4, and VIC-20, and manual in Markdown and PDF format.
        draft: ${{ github.event_name == 'push' && contains(github.ref, 'refs/heads/test-release') }}
        prerelease: ${{ github.event_name == 'push' && contains(github.ref, 'refs/heads/test-release') }}


    - name: Upload release artifact
      uses: actions/upload-artifact@v1
      with:
        name: release-zip
        path: ${{ env.ZIP_NAME }}
