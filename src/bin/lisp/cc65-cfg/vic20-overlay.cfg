# Memory configuration for the VIC-20 with 32K RAM Cartridge
# Contributed by Stefan Haubenthal
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0200;
}
MEMORY {
    ZP:       file = "",         define = yes, start = $0002, size = $0081;
    LOADADDR: file = %O,                       start = $11FF, size = $0002;
    HEADER:   file = %O,                       start = $1201, size = $000C;
    MAIN:     file = %O,         define = yes, start = $120D, size = $6DF3 - __STACKSIZE__;
    OVL_COMMON: file = "common.ovl", define = yes, start = $0400, size = $0C00;
    OVL_EVAL: file = "eval.ovl", define = yes, start = $0400, size = $0C00;
    OVL_GC:   file = "gc.ovl",   define = yes, start = $0400, size = $0C00;
    OVL_REPL: file = "repl.ovl", define = yes, start = $0400, size = $0C00;
    OVL_BUILTINS: file = "builtins.ovl", define = yes, start = $0400, size = $0C00;
}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    LISPSTART:load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define   = yes;
    OVL_COMMON: load = OVL_COMMON, type = ro;
    OVL_EVAL: load = OVL_EVAL, type = ro;
    OVL_GC:   load = OVL_GC, type = ro;
    OVL_REPL: load = OVL_REPL, type = ro;
    OVL_BUILTINS: load = OVL_BUILTINS, type = ro;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
